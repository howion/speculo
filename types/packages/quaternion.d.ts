/* Mostly generated by Microsoft's dts-gen */
/* eslint-disable */

declare module 'quaternion' {
    export default class quaternion {
        constructor(w: any, x: any, y: any, z: any)

        add(w: any, x: any, y: any, z: any): any

        clone(): any

        conjugate(): any

        div(w: any, x: any, y: any, z: any): any

        dot(w: any, x: any, y: any, z: any): any

        equals(w: any, x: any, y: any, z: any): any

        exp(): any

        imag(): any

        inverse(): any

        isFinite(): any

        isNaN(): any

        log(): any

        mul(w: any, x: any, y: any, z: any): any

        neg(): any

        norm(): any

        normSq(): any

        normalize(): any

        pow(w: any, x: any, y: any, z: any): any

        real(): any

        rotateVector(v: any): any

        scale(s: any): any

        slerp(w: any, x: any, y: any, z: any): any

        sub(w: any, x: any, y: any, z: any): any

        toMatrix(d2: any): any

        toMatrix4(d2: any): any

        toString(): any

        toVector(): any

        static EPSILON: number
        static Quaternion: any
        static default: any

        static fromAxisAngle(axis: any, angle: any): any

        static fromBetweenVectors(u: any, v: any): any

        static fromEuler(phi: any, theta: any, psi: any, order: any): any

        static random(): any
    }

    declare namespace quaternion {
        namespace I {
            const w: number
            const x: number
            const y: number
            const z: number

            function add(w: any, x: any, y: any, z: any): any

            function clone(): any

            function conjugate(): any

            function div(w: any, x: any, y: any, z: any): any

            function dot(w: any, x: any, y: any, z: any): any

            function equals(w: any, x: any, y: any, z: any): any

            function exp(): any

            function imag(): any

            function inverse(): any

            function isFinite(): any

            function isNaN(): any

            function log(): any

            function mul(w: any, x: any, y: any, z: any): any

            function neg(): any

            function norm(): any

            function normSq(): any

            function normalize(): any

            function pow(w: any, x: any, y: any, z: any): any

            function real(): any

            function rotateVector(v: any): any

            function scale(s: any): any

            function slerp(w: any, x: any, y: any, z: any): any

            function sub(w: any, x: any, y: any, z: any): any

            function toMatrix(d2: any): any

            function toMatrix4(d2: any): any

            function toString(): any

            function toVector(): any
        }

        namespace J {
            const w: number
            const x: number
            const y: number
            const z: number

            function add(w: any, x: any, y: any, z: any): any

            function clone(): any

            function conjugate(): any

            function div(w: any, x: any, y: any, z: any): any

            function dot(w: any, x: any, y: any, z: any): any

            function equals(w: any, x: any, y: any, z: any): any

            function exp(): any

            function imag(): any

            function inverse(): any

            function isFinite(): any

            function isNaN(): any

            function log(): any

            function mul(w: any, x: any, y: any, z: any): any

            function neg(): any

            function norm(): any

            function normSq(): any

            function normalize(): any

            function pow(w: any, x: any, y: any, z: any): any

            function real(): any

            function rotateVector(v: any): any

            function scale(s: any): any

            function slerp(w: any, x: any, y: any, z: any): any

            function sub(w: any, x: any, y: any, z: any): any

            function toMatrix(d2: any): any

            function toMatrix4(d2: any): any

            function toString(): any

            function toVector(): any
        }

        namespace K {
            const w: number
            const x: number
            const y: number
            const z: number

            function add(w: any, x: any, y: any, z: any): any

            function clone(): any

            function conjugate(): any

            function div(w: any, x: any, y: any, z: any): any

            function dot(w: any, x: any, y: any, z: any): any

            function equals(w: any, x: any, y: any, z: any): any

            function exp(): any

            function imag(): any

            function inverse(): any

            function isFinite(): any

            function isNaN(): any

            function log(): any

            function mul(w: any, x: any, y: any, z: any): any

            function neg(): any

            function norm(): any

            function normSq(): any

            function normalize(): any

            function pow(w: any, x: any, y: any, z: any): any

            function real(): any

            function rotateVector(v: any): any

            function scale(s: any): any

            function slerp(w: any, x: any, y: any, z: any): any

            function sub(w: any, x: any, y: any, z: any): any

            function toMatrix(d2: any): any

            function toMatrix4(d2: any): any

            function toString(): any

            function toVector(): any
        }

        namespace ONE {
            const w: number
            const x: number
            const y: number
            const z: number

            function add(w: any, x: any, y: any, z: any): any

            function clone(): any

            function conjugate(): any

            function div(w: any, x: any, y: any, z: any): any

            function dot(w: any, x: any, y: any, z: any): any

            function equals(w: any, x: any, y: any, z: any): any

            function exp(): any

            function imag(): any

            function inverse(): any

            function isFinite(): any

            function isNaN(): any

            function log(): any

            function mul(w: any, x: any, y: any, z: any): any

            function neg(): any

            function norm(): any

            function normSq(): any

            function normalize(): any

            function pow(w: any, x: any, y: any, z: any): any

            function real(): any

            function rotateVector(v: any): any

            function scale(s: any): any

            function slerp(w: any, x: any, y: any, z: any): any

            function sub(w: any, x: any, y: any, z: any): any

            function toMatrix(d2: any): any

            function toMatrix4(d2: any): any

            function toString(): any

            function toVector(): any
        }

        namespace ZERO {
            const w: number
            const x: number
            const y: number
            const z: number

            function add(w: any, x: any, y: any, z: any): any

            function clone(): any

            function conjugate(): any

            function div(w: any, x: any, y: any, z: any): any

            function dot(w: any, x: any, y: any, z: any): any

            function equals(w: any, x: any, y: any, z: any): any

            function exp(): any

            function imag(): any

            function inverse(): any

            function isFinite(): any

            function isNaN(): any

            function log(): any

            function mul(w: any, x: any, y: any, z: any): any

            function neg(): any

            function norm(): any

            function normSq(): any

            function normalize(): any

            function pow(w: any, x: any, y: any, z: any): any

            function real(): any

            function rotateVector(v: any): any

            function scale(s: any): any

            function slerp(w: any, x: any, y: any, z: any): any

            function sub(w: any, x: any, y: any, z: any): any

            function toMatrix(d2: any): any

            function toMatrix4(d2: any): any

            function toString(): any

            function toVector(): any
        }
    }
}
